        **Customer Relationship Management**


CREATE DATABASE-
  CREATE DATABASE db_crm


CREATE TABLES-
  CREATE TABLE Customers (
    CustomerID INT PRIMARY KEY,
    FirstName VARCHAR(50),
    LastName VARCHAR(50),
    Email VARCHAR(100) UNIQUE,
    Phone VARCHAR(20),
    City VARCHAR(50),
    Country VARCHAR(50),
    JoinDate DATE
);

  CREATE TABLE Orders (
    OrderID INT PRIMARY KEY,
    CustomerID INT,
    OrderDate DATE,
    OrderAmount DECIMAL(10,2),
    OrderStatus ENUM('Completed', 'Pending', 'Cancelled'),
    FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID)
);

  CREATE TABLE SupportTickets (
    TicketID INT PRIMARY KEY,
    CustomerID INT,
    IssueDescription TEXT,
    Status ENUM('Open', 'In Progress', 'Resolved'),
    CreatedDate DATE,
    FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID)
);

  CREATE TABLE Interactions (
    InteractionID INT PRIMARY KEY,
    CustomerID INT,
    InteractionType ENUM('Email', 'Phone', 'In-Person'),
    InteractionDate DATE,
    FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID)
);


INSERT VALUES INTO TABLES-
  INSERT INTO Customers (CustomerID, FirstName, LastName, Email, Phone, City, Country, JoinDate) VALUES
  (1, 'John', 'Doe', 'john.doe@example.com', '1234567890', 'New York', 'USA', '2023-01-15'),
  (2, 'Alice', 'Smith', 'alice.smith@example.com', '9876543210', 'London', 'UK', '2022-11-20'),
  (3, 'Raj', 'Kumar', 'raj.kumar@example.com', '9988776655', 'Mumbai', 'India', '2024-05-10');

  INSERT INTO Orders (OrderID, CustomerID, OrderDate, OrderAmount, OrderStatus) VALUES
  (101, 1, '2023-02-10', 250.75, 'Completed'),
  (102, 2, '2023-03-05', 150.00, 'Pending'),
  (103, 3, '2024-05-12', 99.99, 'Cancelled');

  INSERT INTO SupportTickets (TicketID, CustomerID, IssueDescription, Status, CreatedDate) VALUES
  (201, 1, 'Login issue', 'Resolved', '2023-03-15'),
  (202, 2, 'Payment not processed', 'In Progress', '2023-04-02'),
  (203, 3, 'Product damaged', 'Open', '2024-05-14');

  INSERT INTO Interactions (InteractionID, CustomerID, InteractionType, InteractionDate) VALUES
  (301, 1, 'Email', '2023-02-12'),
  (302, 2, 'Phone', '2023-03-06'),
  (303, 3, 'In-Person', '2024-05-13');


Qestions-
 1. Retrieve the full name and email of all customers who joined after January 1, 2023. 
 Ans. SELECT FirstName, LastName, Email FROM Customers 
      WHERE JoinDate > '2023-01-01';

 2. Find the total amount of completed orders for each customer. 
 Ans. SELECT CustomerID, SUM(OrderAmount) AS TotalCompletedOrders FROM Orders 
      WHERE OrderStatus = 'Completed' 
      GROUP BY CustomerID;

 3. List all unresolved support tickets (Status = 'Open' or 'In Progress') along with the customer's name.
 Ans. SELECT ST.TicketID, C.FirstName, C.LastName, ST.IssueDescription, ST.Status FROM SupportTickets ST
      JOIN Customers C ON ST.CustomerID = C.CustomerID
      WHERE ST.Status IN ('Open', 'In Progress');

 4. Retrieve the most recent interaction for each customer.
 Ans. SELECT CustomerID, MAX(InteractionDate) AS LatestInteraction FROM Interactions 
      GROUP BY CustomerID;

 5. Count the number of customers in each country.
 Ans. SELECT Country, COUNT(CustomerID) AS CustomerCount FROM Customers 
      GROUP BY Country;

 6. List customers who have placed no orders.
 Ans. SELECT C.CustomerID, C.FirstName, C.LastName FROM Customers C
      LEFT JOIN Orders O ON C.CustomerID = O.CustomerID
      WHERE O.CustomerID IS NULL;

 7. Identify customers who have both unresolved support tickets and pending orders.
 Ans. SELECT DISTINCT C.CustomerID, C.FirstName, C.LastName FROM Customers C
      JOIN SupportTickets ST ON C.CustomerID = ST.CustomerID
      JOIN Orders O ON C.CustomerID = O.CustomerID
      WHERE ST.Status IN ('Open', 'In Progress') AND O.OrderStatus = 'Pending';
 
 8. Calculate the average order amount for each order status.
 Ans. SELECT OrderStatus, AVG(OrderAmount) AS AvgOrderAmount FROM Orders 
      GROUP BY OrderStatus;
 
 9. List all customers who have interacted with the company via email in the past month.
 Ans. SELECT C.CustomerID, C.FirstName, C.LastName FROM Customers C
      JOIN Interactions I ON C.CustomerID = I.CustomerID
      WHERE I.InteractionType = 'Email' AND I.InteractionDate >= DATE_SUB(CURRENT_DATE, INTERVAL 1 MONTH);
 
 10. Show the top 5 customers with the highest total order amount.
 Ans. SELECT CustomerID, SUM(OrderAmount) AS TotalOrderAmount FROM Orders 
      GROUP BY CustomerID 
      ORDER BY TotalOrderAmount DESC 
      LIMIT 5;

